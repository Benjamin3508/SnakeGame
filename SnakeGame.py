import pygameimport randomimport Nameimport ScoreRWimport datetime# Use Name.py to enter the usernameNameprint(f'[System Log] Name entering finished --{datetime.datetime.now()}--')# Initialize Pygamepygame.init()# Define game window dimensionswindow_width = 300window_height = 300# Define colorsblack = (0, 0, 0)white = (255, 255, 255)red = (255, 0, 0)green = (0, 255, 0)# Create game windowgame_window = pygame.display.set_mode((window_width, window_height))pygame.display.set_caption("Ceci Snake Game")# Define fontfont = pygame.font.SysFont(None, 25)# Define snake block sizeblock_size = 10# Define clock to control FPSclock = pygame.time.Clock()# Define function to display scoredef display_score(score):    score_text = font.render("Score: " + str(score) + f'  Hello, {Name.input_text}!', True, black)    score_text2 = font.render(f'Highest score: {ScoreRW.ReadScore("score.txt").read_max()}', True, black)    game_window.blit(score_text, [0, 0])    game_window.blit(score_text2, [0, 17])# Define function to display message and wait for key pressdef message_to_screen(msg, color):    screen_text = font.render(msg, True, color)    game_window.blit(screen_text, [window_width / 6, window_height / 3])    pygame.display.update()    pygame.time.wait(5000)    pygame.time.wait(1000)    game_loop()# Define game loop functiondef game_loop():    # Define snake start position    snake_position = [window_width / 2, window_height / 2]    # Define initial snake body (3 blocks)    snake_body = [[snake_position[0], snake_position[1]],                  [snake_position[0] - block_size, snake_position[1]],                  [snake_position[0] - (2 * block_size), snake_position[1]]]    # Define initial food position    food_position = [random.randrange(10, window_width - block_size-10, block_size),                     random.randrange(10, window_height - block_size-10, block_size)]    # Define initial movement direction    direction = "RIGHT"    # Define initial score    score = 0    # Loop until game over    game_over = False    while not game_over:        # Handle events        for event in pygame.event.get():            if event.type == pygame.QUIT:                pygame.quit()                quit()            # Handle key presses            if event.type == pygame.KEYDOWN:                if event.key == pygame.K_LEFT and not direction == "RIGHT":                    direction = "LEFT"                elif event.key == pygame.K_RIGHT and not direction == "LEFT":                    direction = "RIGHT"                elif event.key == pygame.K_UP and not direction == "DOWN":                    direction = "UP"                elif event.key == pygame.K_DOWN and not direction == "UP":                    direction = "DOWN"        # Update snake position based on direction        if direction == "RIGHT":            snake_position[0] += 0.5        elif direction == "LEFT":            snake_position[0] -= 0.6        elif direction == "UP":            snake_position[1] -= 0.5        elif direction == "DOWN":            snake_position[1] += 0.5        # Check if snake has collided with wall        if snake_position[0] >= window_width or snake_position[0] < 0 or snake_position[1] >= window_height or \                snake_position[1] < 0:            game_over = True        # Check if snake has collided with itself        for block in snake_body[2:]:            if snake_position[0] < block[0]+0.5 and snake_position[0] > block[0]-0.5 and\                    snake_position[1] < block[1]+0.5 and snake_position[1] > block[1]-0.5:                game_over = True        # Update snake body        snake_head = [snake_position[0], snake_position[1]]        snake_body.insert(0, snake_head)        # Check if snake has collided with food        if snake_position[0] < food_position[0]+9 and snake_position[0] > food_position[0]-9 and\                snake_position[1] < food_position[1]+9 and snake_position[1] > food_position[1]-9:            # Update food position and score            food_position = [random.randrange(20, window_width - block_size-20, block_size),                             random.randrange(20, window_height - block_size-20, block_size)]            score += 15            # Add 10 blocks to snake body            for i in range(20):                snake_body.insert(0, snake_head)        else:            # Remove last block of snake body            snake_body.pop()            # Fill game window with black color        game_window.fill(white)        # Draw snake body        for block in snake_body:            pygame.draw.rect(game_window, green, [block[0], block[1], block_size, block_size])        # Draw food        pygame.draw.rect(game_window, red, [food_position[0], food_position[1], block_size, block_size])        # Display score        display_score(score)        # Update game window        pygame.display.update()        # Control FPS        clock.tick(1000)    # Display game over message    print(f'[System Log] Game over --{datetime.datetime.now()}--')    ScoreRW.AddScore('score.txt').add_more(score)    print(f'[System Log] New Score added {score} --{datetime.datetime.now()}--')    message_to_screen("Game Over!", red)    # Quit Pygame and exit program    pygame.quit()    quit()# Start game loopgame_loop()